{
    "portfolio_title": "ABDULSALAM BASIT ML PORTFOLIO",
    "projects": {
        "home": {
            "title": "Home",
            "content": "## My public ML portfolio\n\nThis portfolio contains descriptions of some selected projects, majorly computer vision projects on different areas including classification and segmentation.\n\n### Contact\n\n* Email: <a href=\"mailto:basitsalam2001@gmail.com\">basitsalam2001@gmail.com</a>\n* Phone: <a href=\"tel:+2347050837042\">+2347050837042</a>\n\nA copy of my CV can be accessed at [CV [gdrive link]](https://docs.google.com/document/d/1abzvZSsUPLYUKVUf_qC6vZPpm_ByAZr3/edit?usp=sharing&ouid=109569805470530100719&rtpof=true&sd=true)\n\n![Portfolio Image](/static/how-to-build-a-machine-learning-portfolio.jpeg)",
            "table_filename": ""
        },
        "unet-optimized": {
            "title": "Project 1: UNet Optimized",
            "content": "## UNet Optimized With Differential Evolution\n\nThe key goal of the project was to optimize a UNet segmentation model such that we can have a small model size which will still perform as excellent as any other SoTA segmentation models.\n\nThe models compared with were SEGNET, PSPNET, and FCN. The model achieved a weights size of about 5mb in contrast to others that are in the range of tens and hundreds mb. The training data used was potato leaves downloaded from plant village which included Healthy, Early Blight and Late blight. Training was done using just early blight but models were evaluated on all 3 classes. Annotations were done manually.\n\n### Tools Used:\n\n1.  VGG IMAGE ANNOTATOR\n2.  TENSORFLOW\n3.  PYTHON\n4.  NUMPY\n5.  STREAMLIT\n6.  OpenCV etc\n\n### Project Highlight:\n\n* Performed data engineering.\n* Optimized a UNet to have small parameters and low model size.\n* Achieved good metrics on the segmentation task. MIoU > 75%\n* Implemented a streamlit interface for visualizing predictions\n\n![VIA in use](/static/VIA_in_use.png)\n\n<p class=\"text-center\"><small>VIA IN USE</small></p>",
            "table_filename": ""
        },
        "pretrained-unet": {
            "title": "Project 2: Pretrained UNet",
            "content": "## UNet with Pretrained Encoders and Optimized With Differential Evolution\n\nThe key objectives of the project was to optimize a number of UNet segmentation architectures with pretrained encoders like VGG19 and so on with differential evolution.\n\nIn the project, some layers of the encoder of a standard Unet architecture were replaced with pretrained weights from different models. The next step was to optimize the layers of the decoder using differential evolution and record the values.\n\nThe training data used for the project include leaves of maize, cassava, yam etc. In comparing the models, each model is trained 6 times. A training involves training on 4 crops and evaluating on the 5th crop. The 6th training is done by combining all the crops and splitting. In the end, VGG19 model optimized at decoder layer 4 proved to be the best model on the task.\n\n### Tools Used:\n\n1.  VGG IMAGE ANNOTATOR\n2.  Adobe photoshop (for removing unwanted noises in the images used)\n3.  TENSORFLOW\n4.  PYTHON\n5.  NUMPY\n6.  STREAMLIT\n7.  OpenCV etc\n\n### Project Highlight:\n\n* Performed data engineering.\n* Replaced layers of the encoder with pretrained weights\n* Optimized layers of the decoders to have small parameters, low model size and good performance.\n* Achieved good metrics on the segmentation task. MIoU > 75%\n* Implemented a streamlit interface for visualizing predictions\n\nA SAMPLE OF THE REPORT AND STREAMLIT INTERFACES ARE SHOWN BELOW. Further enquiry can be checked in the [report [gdrive link]](https://docs.google.com/document/d/1roWh0Jl_VcngLd_OmuGMlIP2hdXSJRbf/edit?usp=drivesdk&ouid=109569805470530100719&rtpof=true&sd=true) or by contacting me\n\n### Project main report\n\n[TABLE:project2 sample table.xlsx]\n\n### Sample predictions from the models\n\n![Project 2 interface](/static/project2_sample_interface.png)\n![Project 2 outputs](/static/project2_outputs.png)",
            "table_filename": "project2 sample table.xlsx"
        },
        "scizophrenia-detection": {
            "title": "Project 3: Scizophrenia Detection",
            "content": "## SCIZOPHRENIA DETECTION MODEL\n\nThe main goal of the project is to develop a schizophrenia detection model with EfficientNet. The data used was retrieved from schizconnect and processed using matlab dpabi/dparsf and SPI\n\nFurther enquiry can be checked in the [report [gdrive link]](https://docs.google.com/document/d/1-2tQln0dTxbZkHM7kayoc9dcnRcICnUD/edit?usp=drivesdk&ouid=109569805470530100719&rtpof=true&sd=true) or by contacting me\n\n### Tools Used:\n\n1.  SCHIZOPHRENIA\n2.  OPENCV\n3.  TENSORFLOW\n4.  PYTHON\n5.  NUMPY\n6.  SimpleITK\n7.  DLTK\n8.  MATLAB\n9.  DPABI\n\n### Project Highlight:\n\n* Performed data engineering.\n* PROCESSED MRI DATA\n* TRAINED EFFICIENTNET MODELS\n\n### Project Visualizations\n\n![Data Acquisition](/static/project3_data_collection.png)\n\n<p class=\"text-center\"><small>DATA ACQUISITION</small></p>\n\n![DPABI Processing](/static/project3_dpabi_proessing.png)\n\n<p class=\"text-center\"><small>DPABI PROCESSING</small></p>\n\n![Processed Images](/static/project3_processed_images.png)\n\n<p class=\"text-center\"><small>PROCESSED IMAGES</small></p>",
            "table_filename": ""
        },
        "tiny-segmentation": {
            "title": "Project 4: Tiny Segmentation",
            "content": "## Tiny Segmentation Network\n\nThe key requirement of the project was to build a small model for segmenting plant leaves. The model should be small enough to be deployed on a microcontroller but also powerful enough to perform up to task.\n\nIn the project, the model mimicked a standard unet but the approach used was utilizing a deeper model and creating different decoder networks for each class and then combining the outputs at the inference. The training data used for the project include leaves of maize, cassava, yam etc., all featuring different types of diseases. For evaluation, the model was first evaluated against other standard Unet architectures with pretrained encoders and then with other SoTA segmentation models. In the end, the model had a total model size of 8mb and it performed the best on the task.\n\n### Tools Used:\n\n1.  VGG IMAGE ANNOTATOR\n2.  Adobe photoshop (for removing unwanted noises in the images used)\n3.  TENSORFLOW\n4.  PYTHON\n5.  NUMPY\n6.  STREAMLIT\n7.  OpenCV etc\n8.  FLUTTER\n\n### Project Highlight:\n\n* Performed data engineering.\n* Created a tiny segmentation model.\n* Achieved good metrics on the segmentation task. MIoU > 80%\n* Implemented a streamlit interface for visualizing predictions\n* Deployed The model on an android phone\n\nA SAMPLE OF THE REPORT AND OTHER MODEL VISUALIZATIONS ARE SHOWN BELOW. Further enquiry can be checked in the [report [gdrive link]](https://docs.google.com/document/d/1ZuVrWaqN7Jhi-rECwiz1xBuiiiA-LPCU/edit?usp=drivesdk&ouid=103980037459622424907&rtpof=true&sd=true) or by contacting me\n\n### Project main report\n\n[TABLE:project4 sample table.xlsx]\n\n### Sample predictions from the models\n\n![Project 4 outputs](/static/project4_outputs.png)\n\n### Model visualization\n\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        ![Model outlook](/static/project4_novel_outlook.jpg)\n        <p class=\"text-center\"><small>model outlook</small></p>\n    </div>\n    <div class=\"col-md-6\">\n        ![Model architecture](/static/project4_NOVEL_MODEL_ARCHITECTURE.png)\n        <p class=\"text-center\"><small>model arch</small></p>\n    </div>\n</div>\n\n### Android App\n\n![Android deployment](/static/segmenterApp.jpg)\n\n<p class=\"text-center\"><small>Android deployment</small></p>",
            "table_filename": "project4 sample table.xlsx"
        },
        "tiny-seg-class": {
            "title": "Project 5: Tiny Seg/Class Net",
            "content": "## Tiny Segmentation and Classification Network\n\nThe goal of the project was to build a small model for segmenting and classifying plant leaves. The model should be small enough to be deployed on a microcontroller but also powerful enough to perform up to task.\n\nIn the project, a classification model was built and then integrated with the segmentation model built in the prior project. In building the classification model, some concepts used were:\n\n* THE USE OF WIDE NETWORKS\n* THE USE OF DEEP NETWORKS\n* THE USE OF INCEPTION MODULES\n* THE USE OF RESIDUAL CONNECTIONS\n* THE USE OF 1x1 CONVOLUTIONS\n* THE USE OF CNN INSTEAD OF DENSE NETWORKS\n\nThe training data used for the project include leaves of maize, cassava, yam etc., all featuring different types of diseases as in the case of the segmentation model. For evaluation, the classification model was evaluated against some other SoTA classification models. In the end, the classification model had a total model size of <400kb and it performed the best on the task but second best to Densenet pretrained model.\n\n### Tools Used:\n\n1.  VGG IMAGE ANNOTATOR\n2.  Adobe photoshop (for removing unwanted noises in the images used)\n3.  TENSORFLOW\n4.  PYTHON\n5.  NUMPY\n6.  STREAMLIT\n7.  OpenCV etc\n8.  FLUTTER\n\n### Project Highlight:\n\n* Performed data engineering.\n* Created a tiny classification model.\n* Achieved good metrics on the segmentation task. F1 score > 98%\n* Implemented a streamlit interface for visualizing predictions\n* Deployed The model on an android phone\n\nA SAMPLE OF THE REPORT AND OTHER MODEL VISUALIZATIONS ARE SHOWN BELOW. Further enquiry can be checked in the [report [gdrive link]](https://docs.google.com/document/d/1X0QJ3VesoOagpyS5ptqLvy3sjBW9Tb18/edit?usp=drivesdk&ouid=103980037459622424907&rtpof=true&sd=true) or by contacting me\n\n### Project main report\n\n[TABLE:project5 sample table.xlsx]\n\n![Project 5 interface](/static/project5_sample_interface.png)\n\n### Model visualization\n\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        ![Model large](/static/project5_large.png)\n        <p class=\"text-center\"><small>model large</small></p>\n    </div>\n    <div class=\"col-md-6\">\n        ![Model small](/static/project5_small.png)\n        <p class=\"text-center\"><small>model small</small></p>\n    </div>\n</div>\n\n### Android App\n\n![Android deployment](/static/segClassApp.jpg)\n\n<p class=\"text-center\"><small>Android deployment</small></p>",
            "table_filename": "project5 sample table.xlsx"
        },
        "arduino-afib": {
            "title": "EMBEDDED AFib DETECTION SYSTEM",
            "content": "## ARDUINO/ML AFib DETECTION\r\n\r\nFor this project, I built an embedded system-based ECG acquisition system. The system was also equipped with a predictive algorithm for Atrial Fibrillation (AFib) detection",
            "table_filename": ""
        },
        "neural-translation": {
            "title": "Project 7: NEURAL TRANSLATION (ongoing)",
            "content": "## NEURAL TRANSLATION AND AUDIO GENERATION\n\n**ANTICIPATE!!!**\n\nIt is a system that takes audio directly from a microphone, transcribes it, translates to other languages, transforms the translated texts to audio, sends it over bluetooth with raspberry to multiple bluetooth speakers with each speaker handling specific language.",
            "table_filename": ""
        },
        "ai-hotspot-forecast": {
            "title": "AI HOTSPOT FORECAST",
            "content": "## AI HOTSPOT FORECAST\n\nThis is the content for your new project. Use **Markdown** to format your text, and use the `[TABLE:filename.xlsx]` tag to embed tables."
        }
    }
}